<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
circle_smallp = 12;
circle_largep = 64;
circle_vsmallp = 4;
circle_octp = 8;
color = c_white;
smg_spacing_extra = 20;
zooka_spacing_s = 8;
zooka_spacing_l = 14;
launcher_spacing_y = 20;
grav = 0.4;
x = obj_player.x;
y = obj_player.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move cursor with mouse movement
display_w = display_get_width();
display_h = display_get_height();

x += (display_mouse_get_x() - display_w/2 + global.tether_hsp);
y += (display_mouse_get_y() - display_h/2 + global.tether_vsp);

x = clamp(x, view_xview, view_xview + 1024);
y = clamp(y, view_yview, view_yview + 576);
    
display_mouse_set(display_w/2, display_h/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw individual gun cursors
if (instance_exists(obj_pistol))
{
    draw_set_color(color);
    draw_set_circle_precision(circle_smallp);
    draw_circle(x, y, 6, 1);
}

else if (instance_exists(obj_zooka))
{
    draw_set_color(color);
    draw_rectangle(x - zooka_spacing_s, y - zooka_spacing_s,
    x + zooka_spacing_s, y + zooka_spacing_s, 1);
    //Top left line
    draw_line(x - zooka_spacing_s, y - zooka_spacing_s,
    x - zooka_spacing_l, y - zooka_spacing_l);
    //Top right line
    draw_line(x + zooka_spacing_s, y - zooka_spacing_s,
    x + zooka_spacing_l, y - zooka_spacing_l);
    //Bottom left line
    draw_line(x - zooka_spacing_s, y + zooka_spacing_s,
    x - zooka_spacing_l, y + zooka_spacing_l);
    //Bottom right line
    draw_line(x + zooka_spacing_s, y + zooka_spacing_s,
    x + zooka_spacing_l, y + zooka_spacing_l);
}

else if (instance_exists(obj_shotgun))
{
    draw_set_color(color);
    draw_set_circle_precision(circle_largep);
    draw_circle(x, y, distance_to_object(obj_player)/4, 1);
    draw_set_circle_precision(circle_smallp);
    draw_circle(x, y, 4, 0);
}

else if (instance_exists(obj_smg))
{
    smg_spacing = distance_to_object(obj_player)/4.5 + 12;
    draw_set_color(color);
    draw_set_circle_precision(circle_smallp);
    draw_circle(x, y, 4, 0);
    //Bottom line
    draw_line(x + smg_spacing_extra - smg_spacing, y + smg_spacing,
    x - smg_spacing_extra + smg_spacing, y + smg_spacing);
    //Top line
    draw_line(x + smg_spacing_extra - smg_spacing, y - smg_spacing,
    x - smg_spacing_extra + smg_spacing, y - smg_spacing);
    //Right Line
    draw_line(x + smg_spacing, y + smg_spacing_extra - smg_spacing,
    x + smg_spacing, y - smg_spacing_extra + smg_spacing);
    //Left Line
    draw_line(x - smg_spacing, y + smg_spacing_extra - smg_spacing,
    x - smg_spacing, y - smg_spacing_extra + smg_spacing);
}

else if (instance_exists(obj_revolver))
{
    draw_set_color(color);
    draw_set_circle_precision(circle_vsmallp);
    draw_circle(x, y, 7, 0);
    //draw_line(obj_revolver.x + lengthdir_x(10, obj_revolver.direction),
    //obj_revolver.y - lengthdir_y(4, obj_revolver.direction), x, y);
}

else if (instance_exists(obj_spingun))
{
    spin_spacing = distance_to_object(obj_player)/50 + obj_spingun.accuracy*5;
    draw_set_color(color);
    draw_set_circle_precision(circle_smallp);
    draw_circle(x, y, 4, 0);
    draw_set_circle_precision(circle_octp);
    draw_circle(x, y, spin_spacing, 1);
    //draw_rectangle(x + spin_spacing, y + spin_spacing, x - spin_spacing, y - spin_spacing, 1);
}

else if (instance_exists(obj_landmines))
{
    draw_set_color(color);
    //Initialize start of array
    arcx[0] = obj_landmines.x + lengthdir_x(-10, obj_landmines.direction);
    arcy[0] = obj_landmines.y + lengthdir_y(-5, obj_landmines.direction);
    //Initialize starting hsp and vsp
    hsp = lengthdir_x(10 + abs(obj_player.hsp), obj_landmines.direction);
    vsp = lengthdir_y(8, obj_landmines.direction);
    //Initialize timing variables
    var timer, i;
    var wait = 0;
    //Create line array
    for (timer = 1;timer &lt;= 1000;timer++)
    {
        if(wait == 11)
        {
            if (vsp &lt; 10) vsp += grav;
            hsp *= 0.96;
        }
        wait = min(wait + 1, 11);
        arcx[timer] = arcx[timer - 1] + hsp;
        arcy[timer] = arcy[timer - 1] + vsp;
    }
    //Draw line
    for (i = 0;i &lt; 1000;i++)
    {
        if (collision_point(arcx[i + 1], arcy[i + 1], obj_wall, false, true)) break;
        draw_line(arcx[i], arcy[i], arcx[i + 1], arcy[i + 1]);
    }
    //Draw dot cursor
    draw_set_circle_precision(circle_largep);
    draw_circle(x, y, 6, 0);
}

else if (instance_exists(obj_launcher))
{
    draw_set_color(color);
    //Initialize start of array
    arcx[0] = obj_launcher.x + lengthdir_x(20, obj_launcher.direction);
    arcy[0] = obj_launcher.y + lengthdir_y(20, obj_launcher.direction);
    //Initialize starting hsp and vsp
    hsp = lengthdir_x(20 + abs(obj_player.hsp), obj_launcher.direction);
    vsp = lengthdir_y(16, obj_launcher.direction);
    //Initialize timing variables
    var timer, i;
    var wait = 0;
    //Create line array
    for (timer = 1;timer &lt;= 1000;timer++)
    {
        if(wait == 11 &amp;&amp; vsp &lt; 10)
        {
            vsp += grav;
        }
        wait = min(wait + 1, 11);
        arcx[timer] = arcx[timer - 1] + hsp;
        arcy[timer] = arcy[timer - 1] + vsp;
    }
    //Draw line
    for (i = 0;i &lt; 1000;i++)
    {
        if (collision_point(arcx[i + 1], arcy[i + 1], obj_wall, false, true)) break;
        draw_line(arcx[i], arcy[i], arcx[i + 1], arcy[i + 1]);
    }
    //Left line
    draw_line(x - 3, y - launcher_spacing_y, x - 3, y + launcher_spacing_y);
    //Right line
    draw_line(x + 3, y - launcher_spacing_y, x + 3, y + launcher_spacing_y);
    //Top line
    draw_line(x - 7, y - launcher_spacing_y, x + 7, y - launcher_spacing_y);
    //Bottom line
    draw_line(x - 7, y + launcher_spacing_y, x + 7, y + launcher_spacing_y);
    //Mid line left
    draw_line(x - 5, y, x - 3, y);
    //Mid line right
    draw_line(x + 5, y, x + 3, y);
}

else if (instance_exists(obj_rivetgun))
{
    draw_set_color(color);
    draw_line_width(x - 6, y + 6, x + 6, y - 6, 2);
    draw_line_width(x + 6, y + 6, x - 6, y - 6, 2);
}

else
{
    draw_set_color(color);
    draw_set_circle_precision(circle_largep);
    draw_circle(x, y, 6, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
