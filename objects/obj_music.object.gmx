<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle mute
scr_getinputs();
if (key_m &amp;&amp; !global.text_entry) global.muted = global.muted ^^ 1;

if (global.muted == 0)
{
    switch (room)
    {
    
        case rm_level1:
        {
            if (!audio_is_playing(snd_music1) &amp;&amp; instance_exists(obj_player))
            {
                audio_play_sound(snd_music1, 0, 1);
                audio_sound_gain(snd_music1, global.music_gain, 0);
            }
        }
        break;
        
        case rm_level2:
        {
            if (!audio_is_playing(snd_music2) &amp;&amp; instance_exists(obj_player))
            {
                audio_play_sound(snd_music2, 0, 1);
                audio_sound_gain(snd_music2, global.music_gain, 0);
            }
        }
        break;
        
        case rm_level3:
        {
            if (!audio_is_playing(snd_music3) &amp;&amp; instance_exists(obj_player))
            {
                audio_play_sound(snd_music3, 0, 1);
                audio_sound_gain(snd_music3, global.music_gain, 0);
            }
        }
        break;
        
        case rm_menu:
        {
            if (!audio_is_playing(snd_musicm))
            {
                audio_play_sound(snd_musicm, 0, 1);
                audio_sound_gain(snd_musicm, global.music_gain, 0);
            }
        }
        break;
        
        case rm_levelselect:
        {
            if (!audio_is_playing(snd_musicm))
            {
                audio_play_sound(snd_musicm, 0, 1);
                audio_sound_gain(snd_musicm, global.music_gain, 0);
            }
        }
        break;
        
        case rm_highscores:
        {
            if (!audio_is_playing(snd_musicm))
            {
                audio_play_sound(snd_musicm, 0, 1);
                audio_sound_gain(snd_musicm, global.music_gain, 0);
            }
        }
        break;
        
        case rm_extras:
        {
            if (!audio_is_playing(snd_musicm))
            {
                audio_play_sound(snd_musicm, 0, 1);
                audio_sound_gain(snd_musicm, global.music_gain, 0);
            }
        }
        break;
        
        case rm_options:
        {
            if (!audio_is_playing(snd_musicm))
            {
                audio_play_sound(snd_musicm, 0, 1);
            }
            audio_sound_gain(snd_musicm, global.music_gain, 0);
        }
        break;
        
        case rm_achievements:
        {
            if (!audio_is_playing(snd_musicm))
            {
                audio_play_sound(snd_musicm, 0, 1);
                audio_sound_gain(snd_musicm, global.music_gain, 0);
            }
        }
        break;
        
        case rm_credits:
        {
            if (!audio_is_playing(snd_musicm))
            {
                audio_play_sound(snd_musicm, 0, 1);
                audio_sound_gain(snd_musicm, global.music_gain, 0);
            }
        }
        break;
        
        case rm_range:
        {
            if (!audio_is_playing(snd_musicm) &amp;&amp; instance_exists(obj_player))
            {
                audio_play_sound(snd_musicm, 0, 1);
                audio_sound_gain(snd_musicm, global.music_gain, 0);
            }
        }
        break;
    }
}

else if (global.muted == 1)
{
    switch (room)
    {
        case rm_level1: if (audio_exists(snd_music1)) audio_stop_sound(snd_music1);
        break;
        
        case rm_level2: if (audio_exists(snd_music2)) audio_stop_sound(snd_music2);
        break;
        
        case rm_level3: if (audio_exists(snd_music3)) audio_stop_sound(snd_music3);
        break;
        
        case rm_menu: if (audio_exists(snd_musicm)) audio_stop_sound(snd_musicm);
        break;
        
        case rm_difficulty: if (audio_exists(snd_musicm)) audio_stop_sound(snd_musicm);
        break;
        
        case rm_levelselect: if (audio_exists(snd_musicm)) audio_stop_sound(snd_musicm);
        break;
        
        case rm_highscores: if (audio_exists(snd_musicm)) audio_stop_sound(snd_musicm);
        break;
        
        case rm_extras: if (audio_exists(snd_musicm)) audio_stop_sound(snd_musicm);
        break;
        
        case rm_options: if (audio_exists(snd_musicm)) audio_stop_sound(snd_musicm);
        break;
        
        case rm_achievements: if (audio_exists(snd_musicm)) audio_stop_sound(snd_musicm);
        break;
        
        case rm_credits: if (audio_exists(snd_musicm)) audio_stop_sound(snd_musicm);
        break;
        
        case rm_range: if (audio_exists(snd_musicm)) audio_stop_sound(snd_musicm);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
