<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
gmsb_post = 0;
gmsb_status = "";
global.text_entry = 0;
show_highscores = 0;
get_highscores = 0;
loading = 0;
txt_input = "";
for(i = 0;i &lt; 6; i++) gmsb_topscores[i] = 0;
for(i = 0;i &lt; 6; i++) gmsb_topnames[i] = 0;
tagid[0] = "58b794449969c14884260522176";
tagid[1] = "58b79473a503814884260992176";
tagid[2] = "58b83ce397c9714884692192183";

xspacing = view_xview + view_wview/2;
yspacing = view_yview + view_hview/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for inputs and do HTTP stuff
scr_getinputs();

//
if (global.text_entry = 0 &amp;&amp; key_enter &amp;&amp; global.easy == 0)
{
    global.text_entry = 1;
    with (obj_gameover) instance_destroy();
    with (obj_highscore_draw) instance_destroy();
    with (obj_topwave_draw) instance_destroy();
}

else if (global.text_entry = 1) scr_gettext();

if (get_highscores == 0 &amp;&amp; global.text_entry == 0 &amp;&amp; key_space) get_highscores = 1;

if (get_highscores == 1)
{
    with (obj_highscore_draw) instance_destroy();
    with (obj_topwave_draw) instance_destroy();
    
    loading = 1;
    
    //Check the level
    switch (room)
    {
        case rm_level1: tagid_l = tagid[0];
        break;
        
        case rm_level2: tagid_l = tagid[1];
        break;
        
        case rm_level3: tagid_l = tagid[2];
        break;
    }
    
    //How many scores to get, maximum 10
    var getscore = 6;
    
    //Ask for the scores, this is picked up in the HTTP event
    gmsb_post = http_post_string("http://gmscoreboard.com/handle_score.php?tagid="
    +string(tagid_l)+"&amp;getscore="+string(getscore),"");

    //Stop getting highscores and show them
    get_highscores = 0;
    show_highscores = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return Success or Failure and scores if needed
var r_str = "null";
if (ds_map_find_value(async_load, "id") == gmsb_post)
   {
   if (ds_map_find_value(async_load, "status") == 0)
      {
      r_str = ds_map_find_value(async_load, "result");
      }
   }

//shows the json string delivered by the server, status contains errors or shows Success
//show_message(r_str);

//first decode the json string, 
//then you can get each variable by name just like gmsb_status below.
var gmsb_map = json_decode(r_str);
gmsb_status = ds_map_find_value(gmsb_map, "status");

for(i = 0; i &lt; array_length_1d(gmsb_topscores); i++)
{
    gmsb_topscores[i] = ds_map_find_value(gmsb_map, "s" + string(i + 1));
}

for(i = 0; i &lt; array_length_1d(gmsb_topnames); i++)
{
    gmsb_topnames[i] = ds_map_find_value(gmsb_map, "p" + string(i + 1));
}

//Stop loading
loading = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_font(fnt_normal);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_text(xspacing, yspacing + 210, string(gmsb_status));

if (!global.text_entry &amp;&amp; !show_highscores &amp;&amp; !get_highscores)
{
    draw_set_font(fnt_normal);
    draw_text(xspacing, yspacing + 150, "Press Enter to submit score.");
    draw_text(xspacing, yspacing + 170, "Press Space to view scores.");
}
    
if (global.text_entry)
{
    draw_set_font(fnt_menu);
    draw_text(xspacing, yspacing - 100, "Enter a username:");
    draw_set_font(fnt_normal);
    draw_text(xspacing, yspacing - 70, "Max 14 characters");
    draw_set_font(fnt_menu);
    draw_text(xspacing, yspacing, string(txt_input));
}

if (loading)
{
    draw_set_font(fnt_menu);
    draw_text(xspacing, yspacing + 170, "Loading...");
}

if (show_highscores &amp;&amp; !global.text_entry)
{
    //Draw reentry
    draw_set_font(fnt_normal);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(xspacing, yspacing + 140, "Press Space to refresh.");
    
    //Draw backdrop
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(view_xview + view_wview*3/4 - 100, view_yview + view_hview/2 - 120,
    view_xview + view_wview*3/4 + 100, view_yview + view_hview/2 + 100, 0);
    draw_rectangle(view_xview + view_wview/4 - 100, view_yview + view_hview/2 - 120,
    view_xview + view_wview/4 + 100, view_yview + view_hview/2 + 100, 0);
    draw_set_alpha(1);
    
    //Draw scores
    draw_set_font(fnt_normal);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    draw_text(view_xview + view_wview*3/4, view_yview + view_hview/2 - 100, "Top scores:");
    
    for (i = 0; i &lt; 6; i++)
    {
    draw_text(view_xview + view_wview*3/4, view_yview + view_hview/2 - 60 + i*25, string(gmsb_topscores[i]));
    }
    
    //Draw names    
    draw_text(view_xview + view_wview/4, view_yview + view_hview/2 - 100, "Top players:");
    for (i = 0; i &lt; 6; i++)
    {
    draw_text(view_xview + view_wview/4, view_yview + view_hview/2 - 60 + i*25, string(gmsb_topnames[i]));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
